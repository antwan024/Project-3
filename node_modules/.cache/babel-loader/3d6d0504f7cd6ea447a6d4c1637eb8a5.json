{"ast":null,"code":"var _jsxFileName = \"/Users/obiageliogbutor/Desktop/Repo/Project-3/src/App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport AppCards from './components/AppCards/AppCards';\nimport screen from \"./screens.json\";\nimport Wrapper from './components/Wrapper/Wrapper';\nlet highPointCount = 0;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      screen,\n      Point: 0,\n      highPoint: 0,\n      status: \"Click each screen view content!\"\n    };\n\n    this.handleClickedScreen = id => {\n      const screenPicked = this.state.screen.filter(screen => screen.id === id);\n      console.log(screenPicked);\n\n      if (this.state.Point < 11 && !screenPicked[0].chosenScreen) {\n        screenPicked[0].chosenScreen = true;\n        console.log(screenPicked);\n        this.setState({\n          screen\n        });\n        console.log(screen);\n        screen.sort(() => Math.random() - 0.5);\n        this.setState({\n          Point: this.state.Point + 1\n        });\n        this.setState({\n          status: \"You're doing great!\"\n        });\n\n        if (this.state.highPoint <= this.state.Point) {\n          highPointCount++;\n          this.setState({\n            highPoint: highPointCount\n          });\n        }\n      } else if (this.state.Point <= 11 && screenPicked[0].chosenScreen) {\n        this.setState({\n          status: \"That wasn't a fresh screen! Try selecting a new screen again!\"\n        });\n        this.setState({\n          Point: 0\n        });\n        screen.forEach(screen => {\n          screen.chosenScreen = false;\n        });\n        this.setState({\n          screen\n        });\n        console.log(screen);\n      } else if (this.state.Point === 11 && !screenPicked[0].chosenScreen) {\n        this.setState({\n          status: \"Congratulations! You have the highest Point!\"\n        });\n        this.setState({\n          highPoint: 12\n        });\n        this.setState({\n          Point: 0\n        });\n        screen.forEach(screen => {\n          screen.chosenScreen = false;\n        });\n        this.setState({\n          screen\n        });\n        console.log(screen);\n        screen.sort(() => Math.random() - 0.5);\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"nav-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"main-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Best Life!!!\"), React.createElement(\"ul\", {\n      className: \"nav-elements\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"each-nav-element\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Points: \", this.state.Point), React.createElement(\"li\", {\n      className: \"each-nav-element\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Highest Points: \", this.state.highPoint), React.createElement(\"li\", {\n      className: \"each-nav-element\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, this.state.status))), React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.state.screen.map(screen => React.createElement(AppCards, {\n      handleClickedScreen: this.handleClickedScreen,\n      id: screen.id,\n      key: screen.id,\n      name: screen.name,\n      image: screen.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }))), React.createElement(\"footer\", {\n      className: \"footer-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"footer-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"\\xA9 2019 \", React.createElement(\"a\", {\n      className: \"github-link\",\n      href: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Mongolicious\"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/obiageliogbutor/Desktop/Repo/Project-3/src/App.js"],"names":["React","Component","AppCards","screen","Wrapper","highPointCount","App","state","Point","highPoint","status","handleClickedScreen","id","screenPicked","filter","console","log","chosenScreen","setState","sort","Math","random","forEach","render","map","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css';\nimport AppCards from './components/AppCards/AppCards'\nimport screen from \"./screens.json\";\nimport Wrapper from './components/Wrapper/Wrapper'\n\nlet highPointCount = 0;\n\nclass App extends Component {\n  state = {\n    screen, \n    Point: 0, \n    highPoint: 0,\n    status: \"Click each screen view content!\"\n  };\n\n  handleClickedScreen = id => {\n  \n    const screenPicked = this.state.screen.filter(screen => screen.id === id);\n    console.log(screenPicked);\n\n    if (this.state.Point < 11 && !screenPicked[0].chosenScreen) {\n      screenPicked[0].chosenScreen = true;\n      console.log(screenPicked); \n      this.setState({ screen });\n      console.log(screen);\n      screen.sort(() => Math.random() - 0.5);\n      this.setState({ Point: this.state.Point + 1 });\n      this.setState({ status: \"You're doing great!\" });\n      if (this.state.highPoint <= this.state.Point) {\n        highPointCount++;\n        this.setState({ highPoint: highPointCount });\n      }\n    } else if (this.state.Point <= 11 && screenPicked[0].chosenScreen) {\n        this.setState({ status: \"That wasn't a fresh screen! Try selecting a new screen again!\" });\n        this.setState({ Point: 0 });\n        screen.forEach(screen => {\n          screen.chosenScreen = false; \n        });\n        this.setState({ screen });\n        console.log(screen);\n    } else if (this.state.Point === 11 && !screenPicked[0].chosenScreen) {\n      this.setState({ status: \"Congratulations! You have the highest Point!\" });\n      this.setState({ highPoint: 12 });\n      this.setState({ Point: 0 });\n\n      screen.forEach(screen => {\n        screen.chosenScreen = false; \n      });\n\n      this.setState({ screen });\n      console.log(screen);\n\n      screen.sort(() => Math.random() - 0.5);\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n          <nav className=\"nav-container\">\n            <h1 className=\"main-header\">Best Life!!!</h1>\n            <ul className=\"nav-elements\">\n              <li className=\"each-nav-element\">Points: {this.state.Point}</li>\n              <li className=\"each-nav-element\">Highest Points: {this.state.highPoint}</li>\n              <li className=\"each-nav-element\">{this.state.status}</li>\n            </ul>\n          </nav>\n        <Wrapper>\n          {this.state.screen.map(screen => (\n            <AppCards\n              handleClickedScreen={this.handleClickedScreen}\n              id={screen.id}\n              key={screen.id}\n              name={screen.name}\n              image={screen.image}\n            />\n          ))}\n        </Wrapper>  \n        <footer className=\"footer-container\">\n          <p className=\"footer-content\">\n              © 2019 <a className=\"github-link\" href='#'>Mongolicious</a>\n          </p>\n        </footer>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}